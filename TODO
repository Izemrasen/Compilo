Compiler
	Optimisations
		Avoid passing results via mem as much as possible
		symtable: free symbols whenever possible
	Functions???
		Chained list of symbol tables (current symtable <-> current function being called)
			=> easily remove symbols when function returns
		Store every function in a dedicated table w/ their addresses!!!
		Call
			for each param: create symbol in new table, then read Rx, then put it in symbol
				next: read Rx + 1, etc. until x = N
			OR easier: push/pop
		Return
			Before jumping into code, save instruction @ before jumping into R16 for instance
				=> function for jumping from/to [R16]
			Save return to R0
			Remove current sym table, set parent sym table to current
	Expressions
		Add "&ID"
	Cleaning
		Clean symtable.*
		st_get: instead of using yyerror() each time, put error handling in symtable.c
		free symbols whenever possible
	Find name for compiler
		Ideas: CompOte
Architecture
	Implement instructions: LOADI, STOREI

BUGS
	#1. If/else: when multiple "if" in "else", "if" jump is not patched

EXTRA MVP
	Optimisations
		Avoid passing results via mem as much as possible
		Instead of passing results via memory, pass it via registers (=> return registers used)
		Distribute registers to avoid using the same repeatedly
		Clear symbol table: rm anonym symbols, etc. (cf TODO)
		...
	Functions
	Strings: support for escaped chars ("\n", etc.)
	Ternary operators
	instr_add(): labelise instructions for debugging purposes